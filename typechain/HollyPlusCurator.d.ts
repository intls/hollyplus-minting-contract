/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface HollyPlusCuratorInterface extends ethers.utils.Interface {
  functions: {
    "auctionHouseContract()": FunctionFragment;
    "hollyPlusContract()": FunctionFragment;
    "initialize(uint8,uint256)": FunctionFragment;
    "payout()": FunctionFragment;
    "payoutWETH()": FunctionFragment;
    "setAuctionAndApprove(uint256)": FunctionFragment;
    "tokenId()": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "auctionHouseContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hollyPlusContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "payout", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payoutWETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionAndApprove",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokenId", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "auctionHouseContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hollyPlusContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payoutWETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionAndApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "PaidOut(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PaidOut"): EventFragment;
}

export class HollyPlusCurator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: HollyPlusCuratorInterface;

  functions: {
    auctionHouseContract(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "auctionHouseContract()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    hollyPlusContract(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "hollyPlusContract()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    initialize(
      _tokenCreatorPercentage: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(uint8,uint256)"(
      _tokenCreatorPercentage: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    payout(overrides?: Overrides): Promise<ContractTransaction>;

    "payout()"(overrides?: Overrides): Promise<ContractTransaction>;

    payoutWETH(overrides?: Overrides): Promise<ContractTransaction>;

    "payoutWETH()"(overrides?: Overrides): Promise<ContractTransaction>;

    setAuctionAndApprove(
      _auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAuctionAndApprove(uint256)"(
      _auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenId(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "tokenId()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    weth(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "weth()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  auctionHouseContract(overrides?: CallOverrides): Promise<string>;

  "auctionHouseContract()"(overrides?: CallOverrides): Promise<string>;

  hollyPlusContract(overrides?: CallOverrides): Promise<string>;

  "hollyPlusContract()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _tokenCreatorPercentage: BigNumberish,
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(uint8,uint256)"(
    _tokenCreatorPercentage: BigNumberish,
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  payout(overrides?: Overrides): Promise<ContractTransaction>;

  "payout()"(overrides?: Overrides): Promise<ContractTransaction>;

  payoutWETH(overrides?: Overrides): Promise<ContractTransaction>;

  "payoutWETH()"(overrides?: Overrides): Promise<ContractTransaction>;

  setAuctionAndApprove(
    _auctionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAuctionAndApprove(uint256)"(
    _auctionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenId(overrides?: CallOverrides): Promise<BigNumber>;

  "tokenId()"(overrides?: CallOverrides): Promise<BigNumber>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    auctionHouseContract(overrides?: CallOverrides): Promise<string>;

    "auctionHouseContract()"(overrides?: CallOverrides): Promise<string>;

    hollyPlusContract(overrides?: CallOverrides): Promise<string>;

    "hollyPlusContract()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _tokenCreatorPercentage: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(uint8,uint256)"(
      _tokenCreatorPercentage: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    payout(overrides?: CallOverrides): Promise<void>;

    "payout()"(overrides?: CallOverrides): Promise<void>;

    payoutWETH(overrides?: CallOverrides): Promise<void>;

    "payoutWETH()"(overrides?: CallOverrides): Promise<void>;

    setAuctionAndApprove(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAuctionAndApprove(uint256)"(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenId()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    PaidOut(withWETH: null): EventFilter;
  };

  estimateGas: {
    auctionHouseContract(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionHouseContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    hollyPlusContract(overrides?: CallOverrides): Promise<BigNumber>;

    "hollyPlusContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _tokenCreatorPercentage: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(uint8,uint256)"(
      _tokenCreatorPercentage: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    payout(overrides?: Overrides): Promise<BigNumber>;

    "payout()"(overrides?: Overrides): Promise<BigNumber>;

    payoutWETH(overrides?: Overrides): Promise<BigNumber>;

    "payoutWETH()"(overrides?: Overrides): Promise<BigNumber>;

    setAuctionAndApprove(
      _auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAuctionAndApprove(uint256)"(
      _auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenId()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionHouseContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "auctionHouseContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hollyPlusContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "hollyPlusContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _tokenCreatorPercentage: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(uint8,uint256)"(
      _tokenCreatorPercentage: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    payout(overrides?: Overrides): Promise<PopulatedTransaction>;

    "payout()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    payoutWETH(overrides?: Overrides): Promise<PopulatedTransaction>;

    "payoutWETH()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setAuctionAndApprove(
      _auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAuctionAndApprove(uint256)"(
      _auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
