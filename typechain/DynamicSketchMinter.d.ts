/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DynamicSketchMinterInterface extends ethers.utils.Interface {
  functions: {
    "createRelease(tuple,tuple,bool,uint256,uint256,address,address,uint256)": FunctionFragment;
    "getRelease(uint256)": FunctionFragment;
    "mint(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "recoverERC20(address,uint256)": FunctionFragment;
    "recoverETH()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPaused(uint256,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createRelease",
    values: [
      {
        maxGasAllowed: BigNumberish;
        disallowZeroGas: boolean;
        enabled: boolean;
      },
      {
        tokenAddress: string;
        tokenIdRangeStart: BigNumberish;
        tokenIdRangeEnd: BigNumberish;
        enabled: boolean;
      },
      boolean,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRelease",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPaused",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRelease", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recoverETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OnNewRelease(uint256)": EventFragment;
    "OnPauseChange(uint256,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OnNewRelease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnPauseChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class DynamicSketchMinter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DynamicSketchMinterInterface;

  functions: {
    createRelease(
      sketchReleaseGasRule: {
        maxGasAllowed: BigNumberish;
        disallowZeroGas: boolean;
        enabled: boolean;
      },
      sketchReleaseRuleOwnership: {
        tokenAddress: string;
        tokenIdRangeStart: BigNumberish;
        tokenIdRangeEnd: BigNumberish;
        enabled: boolean;
      },
      isPaused: boolean,
      maxAllowed: BigNumberish,
      ethPrice: BigNumberish,
      recipient: string,
      mintableAddress: string,
      mintableCollection: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRelease(
      releaseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, boolean, boolean] & {
            maxGasAllowed: BigNumber;
            disallowZeroGas: boolean;
            enabled: boolean;
          },
          [string, BigNumber, BigNumber, boolean] & {
            tokenAddress: string;
            tokenIdRangeStart: BigNumber;
            tokenIdRangeEnd: BigNumber;
            enabled: boolean;
          },
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber
        ] & {
          gasRule: [BigNumber, boolean, boolean] & {
            maxGasAllowed: BigNumber;
            disallowZeroGas: boolean;
            enabled: boolean;
          };
          ownershipRule: [string, BigNumber, BigNumber, boolean] & {
            tokenAddress: string;
            tokenIdRangeStart: BigNumber;
            tokenIdRangeEnd: BigNumber;
            enabled: boolean;
          };
          isPaused: boolean;
          maxAllowed: BigNumber;
          currentReleased: BigNumber;
          ethPrice: BigNumber;
          recipient: string;
          mintableAddress: string;
          mintableCollection: BigNumber;
        }
      ]
    >;

    mint(
      releaseId: BigNumberish,
      tokenOwned: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recoverETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaused(
      releaseId: BigNumberish,
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createRelease(
    sketchReleaseGasRule: {
      maxGasAllowed: BigNumberish;
      disallowZeroGas: boolean;
      enabled: boolean;
    },
    sketchReleaseRuleOwnership: {
      tokenAddress: string;
      tokenIdRangeStart: BigNumberish;
      tokenIdRangeEnd: BigNumberish;
      enabled: boolean;
    },
    isPaused: boolean,
    maxAllowed: BigNumberish,
    ethPrice: BigNumberish,
    recipient: string,
    mintableAddress: string,
    mintableCollection: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRelease(
    releaseId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, boolean, boolean] & {
        maxGasAllowed: BigNumber;
        disallowZeroGas: boolean;
        enabled: boolean;
      },
      [string, BigNumber, BigNumber, boolean] & {
        tokenAddress: string;
        tokenIdRangeStart: BigNumber;
        tokenIdRangeEnd: BigNumber;
        enabled: boolean;
      },
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber
    ] & {
      gasRule: [BigNumber, boolean, boolean] & {
        maxGasAllowed: BigNumber;
        disallowZeroGas: boolean;
        enabled: boolean;
      };
      ownershipRule: [string, BigNumber, BigNumber, boolean] & {
        tokenAddress: string;
        tokenIdRangeStart: BigNumber;
        tokenIdRangeEnd: BigNumber;
        enabled: boolean;
      };
      isPaused: boolean;
      maxAllowed: BigNumber;
      currentReleased: BigNumber;
      ethPrice: BigNumber;
      recipient: string;
      mintableAddress: string;
      mintableCollection: BigNumber;
    }
  >;

  mint(
    releaseId: BigNumberish,
    tokenOwned: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  recoverERC20(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recoverETH(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaused(
    releaseId: BigNumberish,
    isPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createRelease(
      sketchReleaseGasRule: {
        maxGasAllowed: BigNumberish;
        disallowZeroGas: boolean;
        enabled: boolean;
      },
      sketchReleaseRuleOwnership: {
        tokenAddress: string;
        tokenIdRangeStart: BigNumberish;
        tokenIdRangeEnd: BigNumberish;
        enabled: boolean;
      },
      isPaused: boolean,
      maxAllowed: BigNumberish,
      ethPrice: BigNumberish,
      recipient: string,
      mintableAddress: string,
      mintableCollection: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRelease(
      releaseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean, boolean] & {
          maxGasAllowed: BigNumber;
          disallowZeroGas: boolean;
          enabled: boolean;
        },
        [string, BigNumber, BigNumber, boolean] & {
          tokenAddress: string;
          tokenIdRangeStart: BigNumber;
          tokenIdRangeEnd: BigNumber;
          enabled: boolean;
        },
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber
      ] & {
        gasRule: [BigNumber, boolean, boolean] & {
          maxGasAllowed: BigNumber;
          disallowZeroGas: boolean;
          enabled: boolean;
        };
        ownershipRule: [string, BigNumber, BigNumber, boolean] & {
          tokenAddress: string;
          tokenIdRangeStart: BigNumber;
          tokenIdRangeEnd: BigNumber;
          enabled: boolean;
        };
        isPaused: boolean;
        maxAllowed: BigNumber;
        currentReleased: BigNumber;
        ethPrice: BigNumber;
        recipient: string;
        mintableAddress: string;
        mintableCollection: BigNumber;
      }
    >;

    mint(
      releaseId: BigNumberish,
      tokenOwned: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverETH(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPaused(
      releaseId: BigNumberish,
      isPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OnNewRelease(
      releaseId?: null
    ): TypedEventFilter<[BigNumber], { releaseId: BigNumber }>;

    OnPauseChange(
      releaseId?: null,
      pauseStatus?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { releaseId: BigNumber; pauseStatus: boolean }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    createRelease(
      sketchReleaseGasRule: {
        maxGasAllowed: BigNumberish;
        disallowZeroGas: boolean;
        enabled: boolean;
      },
      sketchReleaseRuleOwnership: {
        tokenAddress: string;
        tokenIdRangeStart: BigNumberish;
        tokenIdRangeEnd: BigNumberish;
        enabled: boolean;
      },
      isPaused: boolean,
      maxAllowed: BigNumberish,
      ethPrice: BigNumberish,
      recipient: string,
      mintableAddress: string,
      mintableCollection: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRelease(
      releaseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      releaseId: BigNumberish,
      tokenOwned: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recoverETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaused(
      releaseId: BigNumberish,
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createRelease(
      sketchReleaseGasRule: {
        maxGasAllowed: BigNumberish;
        disallowZeroGas: boolean;
        enabled: boolean;
      },
      sketchReleaseRuleOwnership: {
        tokenAddress: string;
        tokenIdRangeStart: BigNumberish;
        tokenIdRangeEnd: BigNumberish;
        enabled: boolean;
      },
      isPaused: boolean,
      maxAllowed: BigNumberish,
      ethPrice: BigNumberish,
      recipient: string,
      mintableAddress: string,
      mintableCollection: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRelease(
      releaseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      releaseId: BigNumberish,
      tokenOwned: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recoverETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaused(
      releaseId: BigNumberish,
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
